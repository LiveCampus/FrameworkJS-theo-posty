import Head from 'next/head'
import Link from 'next/link'
import { zodResolver } from '@hookform/resolvers/zod'
import Navbar from '../components/Navbar/Navbar'
import { z } from 'zod'
import { SubmitHandler, useForm } from 'react-hook-form'
import axios from 'axios'
import { useEffect, useState } from 'react'
import { ServerResponse } from '../types/types'

const validationSchema = z
  .object({
    email: z
      .string()
      .min(1, { message: 'Email is required' })
      .email({ message: 'Must be a valid email' }),
    password: z.string().min(8, { message: 'Password must be at least 8 characters' }),
    confirmPassword: z.string().min(1, { message: 'Confirm Password is required' }),
  })
  .refine((data) => data.password === data.confirmPassword, {
    path: ['confirmPassword'],
    message: "Password don't match",
  })

type ValidationSchema = z.infer<typeof validationSchema>

export default function Home() {
  const [serverResponse, setServerResponse] = useState<ServerResponse>()
  const [error, setError] = useState('')

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ValidationSchema>({
    resolver: zodResolver(validationSchema),
  })

  const onSubmit: SubmitHandler<ValidationSchema> = async (data) => {
    axios
      .post(`${process.env.NEXT_PUBLIC_API_URL}/auth/register`, {
        email: data.email,
        password: data.password,
      })
      .then((d) => setServerResponse(d.data))
      .catch((e) => setServerResponse(e.response.data))
  }

  useEffect(() => {
    if (!serverResponse) return

    if (serverResponse.error) {
      setError(serverResponse.error)
    } else {
      setError('')
      //setAuth(serverResponse.data) from context
    }
  }, [serverResponse])

  useEffect(
    () => {
      //if auth redirect after time else return
    },
    [
      /* auth from context */
    ],
  )

  return (
    <>
      <Head>
        <title>Register</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="container">
        <article className="grid">
          <div>
            <hgroup>
              <h1>Register</h1>
              <h2>Create an account to order some of our products</h2>
            </hgroup>

            <form onSubmit={handleSubmit(onSubmit)}>
              {error && <p className="error">Error: {error}</p>}
              <input
                type="test"
                placeholder="Email"
                aria-label="Email"
                aria-invalid={errors.email ? true : undefined}
                autoComplete="nickname"
                required
                {...register('email')}
              />
              {errors.email && <small className="error">{errors.email.message}</small>}
              <input
                type="password"
                placeholder="Password"
                aria-label="Password"
                aria-invalid={errors.password ? true : undefined}
                autoComplete="current-password"
                required
                {...register('password')}
              />
              {errors.password && <small className="error">{errors.password.message}</small>}
              <input
                type="password"
                placeholder="Confirm Password"
                aria-invalid={errors.confirmPassword ? true : undefined}
                aria-label="Confirm Password"
                required
                {...register('confirmPassword')}
              />
              {errors.confirmPassword && (
                <small className="error">{errors.confirmPassword.message}</small>
              )}
              <fieldset>
                <Link className="contrast" data-tooltip="Login" href="/login">
                  Already registered ?
                </Link>
              </fieldset>

              <button type="submit" className="contrast">
                Register
              </button>
            </form>
          </div>
        </article>
      </main>
      <footer className="container-fluid">lol</footer>
    </>
  )
}
